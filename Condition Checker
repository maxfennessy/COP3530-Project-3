#include <string>
#include <vector>
#include <iostream>
#include <iomanip>
#include <unordered_map>
using namespace std;

vector<string> conditionChecker(vector<string> init, unordered_map<string, string> partOfSpeech, char beginsWith, char endsWith, int minLenght, int maxLength, int numOfSyllables, string pos) {
	vector<string> ans;
	for (int i = 0; i < init.size(); i++) {
		bool beginW = true, endW = true, min = true, max = true, syl = true, posBool = true;
		if (beginsWith != '0') {
			if (init[i].at(0) != beginsWith) {
				beginW = false;
			}
		}
		if (endsWith != '0') {
			if (init[i].at(init[i].length() - 1) != endsWith) {
				endW = false;
			}
		}
		if (minLenght != -1) {
			if (init[i].length() != minLenght) {
				min = false;
			}
		}
		if (maxLength != -1) {
			if (init[i].length() != maxLength) {
				max = false;
			}
		}
		if (numOfSyllables != -1) {
			int sylCount = 0;
			string vowels = "aeiouy";
			if (vowels.find(init[i].at(0)) != string::npos) {
				sylCount++;
			}
			for (int j = 1; j < init[i].length(); j++) {
				if (vowels.find(init[i].at(j)) != string::npos && vowels.find(init[i].at(j - 1)) == string::npos) {
					sylCount++;
				}
			}
			if (init[i].at(init[i].length() - 1) == 'e') {
				sylCount--;
			}
			if (sylCount <= 0) {
				sylCount = 1;
			}

			if (sylCount != numOfSyllables) {
				syl = false;
			}
		}
		if (pos != "") {
			if (partOfSpeech[init[i]] != pos) {
				posBool = false;
			}
		}
		if (beginW && endW && min && max && syl && posBool) {
			ans.push_back(init[i]);
		}
	}
	return ans;
}
